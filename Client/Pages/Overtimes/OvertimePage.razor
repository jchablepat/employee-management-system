@if (allState.ShowOvertime)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card border-danger shadow-lg">
					<div class="card-header">
						<h4 class="float-start">Manage Employee's Overtime</h4>
					</div>
					<div class="card-header" style="max-height:580px;overflow-x:hidden;overflow-y:scroll">
						<div class="card-body">
							<div class="mb-4">
								<button class="btn btn-sm btn-success mr-1" @onclick="ExportToExcel">
									<span class="bi bi-file-earmark-excel"></span>
									Excel Export
								</button>
								<button class="btn btn-sm btn-primary" @onclick="ExportToPdf">
									<span class="bi bi-file-earmark-pdf-fill"></span>
									Pdf Export
								</button>
							</div>

							<MudTable Items="@Overtimes" Dense="true" Hover="true" Bordered="true" Striped="false">
								<HeaderContent>
									<MudTh>Employee ID</MudTh>
									<MudTh>Type</MudTh>
									<MudTh>Start Date</MudTh>
									<MudTh>End Date</MudTh>
									<MudTh>Number of days</MudTh>
									<MudTh>Actions</MudTh>
								</HeaderContent>
								<RowTemplate>
									<MudTd DataLabel="Employee ID">@context.EmployeeId</MudTd>
									<MudTd DataLabel="Type">@context?.OvertimeType?.Name</MudTd>
									<MudTd DataLabel="Start Date">@context.StartDate</MudTd>
									<MudTd DataLabel="End Date">@context.EndDate</MudTd>
									<MudTd DataLabel="Number of days">@context.NumberOfDays</MudTd>
									<MudTd DataLabel="Actions">
										<div>
											<i class="bi bi-pencil text-info" @onclick="() => EditClicked(context!)" style="cursor:pointer;"></i>
											<i class="bi bi-trash text-danger" @onclick="() => DeleteClicked(context!)" style="cursor:pointer;"></i>
										</div>
									</MudTd>
								</RowTemplate>
								<PagerContent>
									<MudTablePager />
								</PagerContent>
							</MudTable>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

<OvertimeDialog @ref="overtimeDialog" OvertimeTypes="OvertimeTypes" Overtime="Overtime" HandleSaveOperationEvent="HandleSaveOperationType" />

@code {
	OvertimeDialog? overtimeDialog;
	Overtime Overtime { get; set; } = new();
	private List<Overtime> Overtimes { get; set; } = [];
	private List<OvertimeType> OvertimeTypes { get; set; } = [];
	protected override async Task OnInitializedAsync()
	{
		await GetOvertimes();
		await GetOvertimeTypes();
		allState.Action += StateHasChanged;
	}

	private async Task GetOvertimes() => Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
	private async Task GetOvertimeTypes() => OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

	void OpenDialog() => overtimeDialog?.OpenDialog();

	private async Task HandleSaveOperationType(Overtime item)
	{
		var result = await overtimeService.Update(item, Constants.OvertimeBaseUrl);

		bool success = await DisplayMessage(result.Flag, result.Message);

		if (success)
		{
			Overtime = new();
			await GetOvertimes();
		}

	}

	private void EditClicked(Overtime item)
	{
		Overtime = item;
		overtimeDialog?.ChangeTitle("Edit Overtime");
		overtimeDialog?.OpenDialog();
	}

	private async Task DeleteClicked(Overtime item)
	{
		bool confirm = await alertService.ShowConfirmation($"Are you sure you want to delete this?", "Confirm Delete");
		if (!confirm) return; // User cancelled the deletion

		var result = await overtimeService.Delete(item.Id, Constants.OvertimeBaseUrl);

		if (await DisplayMessage(result.Flag, result.Message))
			await GetOvertimes();
	}

	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await alertService.ShowSuccessToast(message);

			return true;
		}
		else
		{
			await alertService.ShowErrorToast(message);
			return false;
		}
	}

	private async Task ExportToExcel() => await ExcelService.Export(Overtimes, "Overtimes.xlsx");
	private async Task ExportToPdf() => await PdfService.Export(Overtimes, "Overtimes.pdf");

	public void Dispose() => allState.Action -= StateHasChanged;
}
