@implements IDisposable

@if (allState.ShowOvertimeType)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card shadow-lg">
					<div class="card-header">
						<h4 class="float-start">Overtime Types</h4>
						<button class="btn btn-outline-success float-end" @onclick="AddClicked">
							<i class="bi bi-plus-circle-dotted"></i> Add Type
						</button>
					</div>
					<div class="card-header" style="max-height:580px;overflow-x:hidden;overflow-y:scroll">
						<div class="card-body">
							<table class="table table-striped">
								<thead>
									<tr>
										<th scope="col">#</th>
										<th scope="col">Id</th>
										<th scope="col">Type</th>
										<th scope="col">Action</th>
									</tr>
								</thead>
								<tbody>
									@if (Types is not null)
									{
										int count = 1;
										foreach (var item in Types)
										{
											<tr>
												<th scope="row">@count</th>
												<td>@item.Id</td>
												<td>@item.Name</td>
												<td>
													<i class="bi bi-pencil text-info clickable" @onclick="() => EditClicked(item)"></i>
													<i class="bi bi-trash text-danger clickable" @onclick="() => DeleteClicked(item)"></i>
												</td>
											</tr>
											count++;
										}
									}
									else
									{
										<tr>
											<td colspan="4">
												<div class="alert alert-info text-center">
													No Type added yet!
												</div>
											</td>
										</tr>
									}

								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

<OvertimeTypeDialog @ref="overtimeTypeDialog" OvertimeType="@OvertimeType" HandleSaveOperationEvent="HandleSaveOperationEvent" />

<style>
	.clickable {
		cursor: pointer;
	}
</style>

@code {
	OvertimeTypeDialog? overtimeTypeDialog;
	OvertimeType OvertimeType { get; set; } = new();
	public List<OvertimeType> Types { get; set; } = [];

	protected override async Task OnInitializedAsync()
	{
		await GetTypes();
		allState.Action += StateHasChanged;
	}

	private async Task GetTypes() => Types = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

	private void AddClicked()
	{
		OvertimeType = new();
		overtimeTypeDialog?.ChangeTitle("Add Type");
		OpenDialog();
	}

	void OpenDialog() => overtimeTypeDialog?.OpenDialog();

	// Add or update OvertimeType
	private async Task HandleSaveOperationEvent(OvertimeType item)
	{
		bool success = false;
		if (item.Id > 0)
		{
			var result = await overtimeTypeService.Update(item, Constants.OvertimeTypeBaseUrl);
			success = await DisplayMessage(result.Flag, result.Message);
		} else {
			var result = await overtimeTypeService.Insert(item, Constants.OvertimeTypeBaseUrl);
			success = await DisplayMessage(result.Flag, result.Message);
		}

		if(success)
		{
			OvertimeType = new();
			await GetTypes();
            overtimeTypeDialog?.ChangeTitle("Add Type");
        }
    }

    private void EditClicked(OvertimeType item)
    {
        OvertimeType = item;
        overtimeTypeDialog?.ChangeTitle("Edit Type");
        OpenDialog();
    }

    private async Task DeleteClicked(OvertimeType item)
    {
        bool confirm = await alertService.ShowConfirmation($"Are you sure you want to delete {item.Name}?", "Confirm Delete");
        if (!confirm) return; // User cancelled the deletion

        var result = await overtimeTypeService.Delete(item.Id, Constants.OvertimeTypeBaseUrl);

        if(await DisplayMessage(result.Flag, result.Message))
            await GetTypes();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
		if (flag)
		{
			await alertService.ShowSuccessToast(message);

			return true;
		}
		else
		{
			await alertService.ShowErrorToast(message);
			return false;
		}
	}

	public void Dispose()
	{
		allState.Action -= StateHasChanged;
	}
}
