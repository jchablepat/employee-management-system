@{
	var Tools = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
}

<SfGrid DataSource="@Vacations" AllowPaging="true" AllowSorting="true" Toolbar="@Tools" AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
	<GridPageSettings PageSize="5"></GridPageSettings>
	<GridEvents OnToolbarClick="ToolbarClickedHandler" TValue="Vacation"></GridEvents>
	<GridColumns>
		<GridColumn Field="@nameof(Vacation.EmployeeId)" HeaderText="Employee ID"></GridColumn>
		<GridColumn HeaderText="Type">
			<Template>
				@{
					var item = context as Vacation;
					<div>@item!.VacationType!.Name</div>
				}
			</Template>
		</GridColumn>
		<GridColumn Field="@nameof(Vacation.StartDate)" HeaderText="Start Date"></GridColumn>
		<GridColumn Field="@nameof(Vacation.EndDate)" HeaderText="End Date"></GridColumn>
		<GridColumn Field="@nameof(Vacation.NumberOfDays)" HeaderText="Number of days"></GridColumn>
		<GridColumn HeaderText="Actions">
			<Template>
				@{
					var item = context as Vacation;
					<div>
						<i class="bi bi-pencil text-info" @onclick="() => EditClicked(item!)" style="cursor:pointer;"></i>
						<i class="bi bi-trash text-danger" @onclick="() => DeleteClicked(item!)" style="cursor:pointer;"></i>
					</div>
				}
			</Template>
		</GridColumn>
	</GridColumns>
</SfGrid>

@code {
	private SfGrid<Vacation>? DefaultGrid;
	private List<Vacation> Vacations { get; set; } = new();
	private Vacation Vacation { get; set; } = new();

	public async Task ToolbarClickedHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
	{
		var test = args.Item.Text;
		if (args.Item.Text == "Excel Export")
			await this.DefaultGrid!.ExportToExcelAsync()!;

		if (args.Item.Text == "PDF Export")
			await this.DefaultGrid!.ExportToPdfAsync()!;
	}

	private void EditClicked(Vacation item)
	{
		Vacation = item;
	}

	private async Task DeleteClicked(Vacation item)
	{
		bool confirm = await alertService.ShowConfirmation($"Are you sure you want to delete this?", "Confirm Delete");
		if (!confirm) return;

		await vacationService.Delete(item.Id, Constants.VacationBaseUrl);
	}
}