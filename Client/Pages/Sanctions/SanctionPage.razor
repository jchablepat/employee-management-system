@implements IDisposable

@if (allState.ShowSanction)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card border-info shadow-lg">
					<div class="card-header">
						<h4 class="float-start">Manage Employee's Sanctions</h4>
					</div>

					<div class="card-header" style="max-height:580px;overflow-x:hidden;overflow-y:scroll">
						<div class="card-body">
							<!--Controls to Export to Excel, PDF and Print Table results-->
							<div class="mb-4">
								<button class="btn btn-sm btn-success mr-1" @onclick="ExportToExcel">
									<span class="bi bi-file-earmark-excel"></span>
									Excel Export
								</button>
								<button class="btn btn-sm btn-primary" @onclick="ExportToPdf">
									<span class="bi bi-file-earmark-pdf-fill"></span>
									Pdf Export
								</button>
							</div>

							<MudTable Items="@Sanctions" Dense="true" Hover="true" Bordered="true" Striped="false">
								<HeaderContent>
									<MudTh>Employee ID</MudTh>
									<MudTh>Type</MudTh>
									<MudTh>Ocurring Date</MudTh>
									<MudTh>Punishment</MudTh>
									<MudTh>Punishment Date</MudTh>
									<MudTh>Actions</MudTh>
								</HeaderContent>
								<RowTemplate>
									<MudTd DataLabel="Employee ID">@context.EmployeeId</MudTd>
									<MudTd DataLabel="Type">@context!.SanctionType!.Name</MudTd>
									<MudTd DataLabel="Ocurring Date">@context.Date</MudTd>
									<MudTd DataLabel="Punishment">@context.Punishment</MudTd>
									<MudTd DataLabel="Punishment Date">@context.PunishmentDate</MudTd>
									<MudTd DataLabel="Actions">
										<div>
											<i class="bi bi-pencil text-info" @onclick="() => EditClicked(context!)" style="cursor:pointer;"></i>
											<i class="bi bi-trash text-danger" @onclick="() => DeleteClicked(context!)" style="cursor:pointer;"></i>
										</div>
									</MudTd>
								</RowTemplate>
								<PagerContent>
									<MudTablePager />
								</PagerContent>
							</MudTable>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

<style>
	#cursorStyle {
		cursor: pointer;
	}
</style>

<SanctionDialog @ref="sanctionDialog" 
	Sanction="Sanction" 
	SanctionTypes="SanctionTypes" 
	HandleSaveOperationEvent="HandleSaveOperationEvent"
/>

@code {
	SanctionDialog? sanctionDialog;
	Sanction Sanction { get; set; } = new();
	List<Sanction> Sanctions { get; set; } = new();
	List<SanctionType> SanctionTypes { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		await GetSanctions();
		await GetSanctionTypes();
		allState.Action += StateHasChanged;
	}

	private async Task GetSanctions() => Sanctions = await sanctionService.GetAll(Constants.SanctionBaseUrl);
	private async Task GetSanctionTypes() => SanctionTypes = await sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);

	void OpenDialog() => sanctionDialog?.OpenDialog();

	private async Task HandleSaveOperationEvent(Sanction sanction)
	{
		var result = await sanctionService.Update(sanction, Constants.SanctionBaseUrl);
		bool isValid = await DisplayMessage(result.Flag, result.Message);

		if (isValid)
		{
			Sanction = new();
			await GetSanctions();
		}
	}

	private void EditClicked(Sanction item)
	{
		Sanction = item;
		sanctionDialog?.ChangeTitle("Edit Sanction");
		OpenDialog();
	}

	private async Task DeleteClicked(Sanction item)
	{
		bool confirm = await alertService.ShowConfirmation($"Are you sure you want to delete this?", "Confirm Delete");
		if (!confirm) return; // User cancelled the deletion

		var result = await sanctionService.Delete(item.Id, Constants.SanctionBaseUrl);

		if (await DisplayMessage(result.Flag, result.Message))
			await GetSanctions();
	}

	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await alertService.ShowSuccessToast(message);

			return true;
		}
		else
		{
			await alertService.ShowErrorToast(message);
			return false;
		}
	}

	private async Task ExportToExcel() => await ExcelService.Export(Sanctions, "Sanctions.xlsx");
	private async Task ExportToPdf() => await PdfService.Export(Sanctions, "Sanctions.pdf");
	
	public void Dispose()
	{
		allState.Action -= StateHasChanged;
	}
}
