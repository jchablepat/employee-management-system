@implements IDisposable

@if (allState.ShowSanctionType)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card shadow-lg">
					<div class="card-header">
						<h4 class="float-start">Sanction Types</h4>
						<button class="btn btn-outline-success float-end" @onclick="AddClicked">
							<i class="bi bi-plus-circle-dotted"></i> Add Type
						</button>
					</div>

					<div class="card-header" style="max-height:580px;overflow-x:hidden;overflow-y:scroll">
						<div class="card-body">
							<table class="table table-striped">
								<thead>
									<tr>
										<th scope="col">#</th>
										<th scope="col">Id</th>
										<th scope="col">Type</th>
										<th scope="col">Action</th>
									</tr>
								</thead>
								<tbody>
									@if (Types is not null)
									{
										int count = 1;
										foreach (var item in Types)
										{
											<tr>
												<th scope="row">@count</th>
												<td>@item.Id</td>
												<td>@item.Name</td>
												<td>
													<i class="bi bi-pencil text-info clickable" @onclick="() => EditClicked(item)"></i>
													<i class="bi bi-trash text-danger clickable" @onclick="() => DeleteClicked(item)"></i>
												</td>
											</tr>
											count++;
										}
									}
									else
									{
										<tr>
											<td colspan="4">
												<div class="alert alert-info text-center">
													No Type added yet!
												</div>
											</td>
										</tr>
									}

								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

<style>
.clickable {
	cursor: pointer;
}
</style>

<SanctionTypeDialog @ref="sanctionTypeDialog" SanctionType="SanctionType" HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
    SanctionTypeDialog? sanctionTypeDialog;
    SanctionType SanctionType { get; set; } = new();
    List<SanctionType> Types { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetSanctionTypes();
        allState.Action += StateHasChanged;
    }

    private async Task GetSanctionTypes() => Types = await sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);

    public void OpenDialog() => sanctionTypeDialog?.OpenDialog();

    public void CloseDialog() => sanctionTypeDialog?.CloseDialog();

    private async Task HandleSaveOperationEvent(SanctionType sanctionType)
    {
        bool isValid = true;
        if (sanctionType.Id <= 0)
        {
            var (Flag, Message) = await sanctionTypeService.Insert(sanctionType, Constants.SanctionTypeBaseUrl);
            isValid = await DisplayMessage(Flag, Message);
        }
        else
        {
            var (Flag, Message) = await sanctionTypeService.Update(sanctionType, Constants.SanctionTypeBaseUrl);
            isValid = await DisplayMessage(Flag, Message);
        }

        if(isValid)
        {
            SanctionType = new();
            await GetSanctionTypes();
            sanctionTypeDialog?.ChangeTitle("Add Sanction Type");
            // CloseDialog();
        }
    }

	private void AddClicked()
	{
		SanctionType = new();
		sanctionTypeDialog?.ChangeTitle("Add Type");
		OpenDialog();
	}

    private void EditClicked(SanctionType item)
    {
        SanctionType = item;
        sanctionTypeDialog?.ChangeTitle("Edit Type");
        OpenDialog();
    }

    private async Task DeleteClicked(SanctionType item)
    {
        bool confirm = await alertService.ShowConfirmation($"Are you sure you want to delete {item.Name}?", "Confirm Delete");
        if (!confirm) return; // User cancelled the deletion

        var result = await sanctionTypeService.Delete(item.Id, Constants.SanctionTypeBaseUrl);

        if (await DisplayMessage(result.Flag, result.Message))
            await GetSanctionTypes();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
		if (flag)
		{
			await alertService.ShowSuccessToast(message);

			return true;
		}
		else
		{
			await alertService.ShowErrorToast(message);
			return false;
		}
	}
	
	public void Dispose()
	{
		allState.Action -= StateHasChanged;
	}
}
