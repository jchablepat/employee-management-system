@implements IDisposable
@if(allState.ShowEmployee)
{
	if(ShowAddOrUpdateEmployee)
	{
		<div class="container">
			<div class="row mt-5">
				<div class="col-lg-1 text-center">
					<i class="bi bi-x-lg fs-5 text-danger" style="cursor:pointer;" @onclick="CloseForm"></i>
				</div>
				<div class="col-lg-6 text-center">
					<h2>@Title Employee</h2>
				</div>
			</div>

			<div class="row">
				<div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
					<div class="hstack">
						@if(FirstLayer)
						{
							<div class="@FloatingNumber1 text-center">1</div>
							<div class="@Floatingdiv1 format-border"></div>
							<div class="@FloatingNumber2 text-center">2</div>
							<div class="@Floatingdiv2 format-border"></div>
						}

						@if (SecondLayer)
						{
							<div class="@FloatingNumber1 text-center">1</div>
							<div class="@Floatingdiv1 format-border"></div>
							<div class="@FloatingNumber1 text-center">2</div>
							<div class="@Floatingdiv2 format-border"></div>
						}
					</div>
				</div>

				<div class="col-lg-12">
					<div class="container-fluid">
						@if(FirstLayer)
						{
							<EditForm Enhance Model="EmployeeGroup1" OnValidSubmit="Form1">
								<DataAnnotationsValidator />

								<div class="row">
									<div class="col-lg-2"></div>
									<div class="col-lg-4">
										<div class="card-title mb-5 fw-bold" style="font-family: Tahoma">Personal Information</div>
										<div class="card-body">
											<div class="form-group">
												<label class="form-label" for="Input_Fullname">Fullname</label>
												<InputText id="Input_Fullname" class="form-control" @bind-Value="EmployeeGroup1.Name" placeholder="John Connor" />
												<ValidationMessage For="@(() => EmployeeGroup1.Name)" class="text-danger" />
											</div>

											<div class="form-group mt-2">
												<label class="form-label">Telephone</label>
												<InputText id="Input_Telephone" class="form-control" @bind-Value="EmployeeGroup1.TelephoneNumber" placeholder="xxx xxx xxxx" />
												<ValidationMessage For="@(() => EmployeeGroup1.TelephoneNumber)" class="text-danger" />
											</div>

											<div class="form-group mt-2">
												<label class="form-label">Address</label>
												<InputTextArea class="form-control" @bind-Value="EmployeeGroup1.Address" />
												<ValidationMessage For="@(() => EmployeeGroup1.Address)" class="text-danger" />
											</div>
											<div class="form-control mt-2">
												<img src="@EmployeeGroup1.Photo" height="100" width="100" />
											</div>
										</div>
									</div>
									<div class="col-lg-4">
										<div class="card-title mb-5 fw-bold" style="font-family: Tahoma">Other Information</div>
										<div class="card-body">
											<div class="form-group">
												<label class="form-label">Civil Id</label>
												<InputText id="Input_CivilId" class="form-control" @bind-Value="EmployeeGroup1.CivilId" />
												<ValidationMessage For="@(() => EmployeeGroup1.CivilId)" class="text-danger" />
											</div>

											<div class="form-group mt-2">
												<label class="form-label">File Number</label>
												<InputText class="form-control" @bind-Value="EmployeeGroup1.FileNumber" />
												<ValidationMessage For="@(() => EmployeeGroup1.FileNumber)" class="text-danger" />
											</div>

											<div class="form-group mt-3">
												<label class="form-label @(ImageUploadMessage == "" ? "" : "text-danger")">
													@(ImageUploadMessage == "" ? "Upload Image" : ImageUploadMessage )
												</label>
												<InputFile class="form-control" OnChange="UploadImage" />
												<ValidationMessage For="@(() => EmployeeGroup1.Photo)" class="text-danger" />
											</div>

											<div class="form-group mt-5">
												<button type="submit" class="btn btn-primary float-end mt-4 mb-5">
													<i class="bi bi-arrow-right"></i> Next
												</button>
											</div>
										</div>
									</div>
									<div class="col-lg-2"></div>
								</div>
							</EditForm>
						}

						@if(SecondLayer)
						{
							<EditForm Enhance Model="EmployeeGroup2" OnValidSubmit="Form2">
								<DataAnnotationsValidator />

								<div class="row">
									<div class="col-lg-2"></div>
									<div class="col-lg-4">
										<div class="card-title mb-5 fw-bold" style="font-family: Tahoma">Job Information</div>
										<div class="card-body">
											<div class="form-group">
												<label class="form-label">Job Name</label>
												<InputText class="form-control" @bind-Value="EmployeeGroup2.JobName" placeholder="Job Name" />
												<ValidationMessage For="@(() => EmployeeGroup2.JobName)" class="text-danger" />
											</div>

											<div class="form-group mt-3">
												@{
													var gralDept = string.IsNullOrEmpty(GeneralDepartment) ? "Select General Department": GeneralDepartment;
												}

												<MudSelect T="string" Label="@gralDept" ValueChanged="OnGeneralDepartmentValueChange">
													@foreach (var dept in GeneralDepartments)
													{
														<MudSelectItem Value="@dept.Id.ToString()">@dept.Name</MudSelectItem>
													}
												</MudSelect>
											</div>

											<div class="form-group mt-3">
												@{
													var department = string.IsNullOrEmpty(Department) ? "Select Department" : Department;
												}
												<MudSelect T="string" Label="@department" ValueChanged="OnDepartmentValueChange">
													@foreach (var dept in Departments)
													{
														<MudSelectItem Value="@dept.Id.ToString()">@dept.Name</MudSelectItem>
													}
												</MudSelect>
											</div>


											<div class="form-group mt-3">
												@{
													var sbranch = string.IsNullOrEmpty(Branch) ? "Select Branch" : Branch;
												}

												<MudSelect T="string" Label="@sbranch" ValueChanged="OnBranchValueChange">
													@foreach (var branch in Branches)
													{
														<MudSelectItem Value="@branch.Id.ToString()">@branch.Name</MudSelectItem>
													}
												</MudSelect>
												<ValidationMessage For="@(() => EmployeeGroup2.BranchId)" class="text-danger" />
											</div>
											<div class="form-group mt-4 mb-5">
												<button class="btn btn-primary float-start" type="button" @onclick="BackToFirstLayer">
													<i class="bi bi-arrow-left"></i> Back
												</button>
											</div>
										</div>
									</div>
									<div class="col-lg-4">
										<div class="card-title mb-5 fw-bold" style="font-family: Tahoma">Location Information</div>
										<div class="card-body">
											<div class="form-group">
												@{ var scountry = Country == "" ? "Select Country": Country; }

												<MudSelect T="string" Label="@scountry" ValueChanged="OnCountryValueChange">
													@foreach (var country in Countries)
													{
														<MudSelectItem Value="@country.Id.ToString()">@country.Name</MudSelectItem>
													}
												</MudSelect>
											</div>

											<div class="form-group mt-3">
												@{ var city = string.IsNullOrEmpty(City) ? "Select City" : City; }

												<MudSelect T="string" Label="@city" ValueChanged="OnCityValueChange">
													@foreach (var cty in Cities)
													{
														<MudSelectItem Value="@cty.Id.ToString()">@cty.Name</MudSelectItem>
													}
												</MudSelect>
											</div>

											<div class="form-group mt-3">
												@{ var stown = string.IsNullOrEmpty(Town) ? "Select Town" : Town; }

												<MudSelect T="string" Label="@stown" ValueChanged="OnTownValueChange">
													@foreach (var town in Towns)
													{
														<MudSelectItem Value="@town.Id.ToString()">@town.Name</MudSelectItem>
													}
												</MudSelect>

												<ValidationMessage For="@(() => EmployeeGroup2.TownId)" class="text-danger" />
											</div>

											<div class="form-control mt-3">
												<label class="form-label">Other</label>
												<textarea class="form-control" @bind="EmployeeGroup2.Other" placeholder="Optional" />
											</div>

											<div class="form-group mt-4 mb-5">
												<button class="btn btn-success float-end" type="submit">
													<i class="bi bi-save"></i> Submit
												</button>
											</div>
										</div>
									</div>
									<div class="col-lg-2"></div>
								</div>
							</EditForm>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

@code {
	[Parameter] public Employee Employee { get; set; } = new();

	[Parameter] public bool ShowAddOrUpdateEmployee { get; set; } = false;
	[Parameter] public EmployeeGroup1 EmployeeGroup1 { get; set; } = new();
	[Parameter] public EmployeeGroup2 EmployeeGroup2 { get; set; } = new();

	[Parameter] public List<Country> Countries { get; set; } = new();
	[Parameter] public List<City> Cities { get; set; } = new();
	[Parameter] public List<Town> Towns { get; set; } = new();

	[Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
	[Parameter] public List<Department> Departments { get; set; } = new();
	[Parameter] public List<Branch> Branches { get; set; } = new();

	string FloatingNumber1 = "floatingNumber";
	string Floatingdiv1 = "floatingDiv";

	string FloatingNumber2 = "inactive-span";
	string Floatingdiv2 = "inactive-div";

	public bool FirstLayer { get; set; } = true;
	public bool SecondLayer { get; set; } = false;

	public string Title { get; set; } = "Add";
	public string GeneralDepartment { get; set; } = "";
	public string Department { get; set; } = "";
	public string Branch { get; set; } = "";
	public string Country { get; set; } = "";
	public string City { get; set; } = "";
	public string Town { get; set; } = "";

	private void ShowLayer2()
	{
		FirstLayer = false;
		SecondLayer = true;
	}

	private void BackToFirstLayer()
	{
		FirstLayer = true;
		SecondLayer = false;
	}

	// Form closed
	[Parameter] public EventCallback NotifyParentFormClosed { get; set; }
	private async Task CloseForm()
	{
		ShowAddOrUpdateEmployee = false;
		await NotifyParentFormClosed.InvokeAsync();
	}

	// File upload
	public string ImageUploadMessage = "";
	private async Task UploadImage(InputFileChangeEventArgs e)
	{
		if(e.File.Name.ToLower().Contains(".png"))
		{
			var format = "image/png";
			var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
			var buffer = new byte[resizeImage.Size];
			await resizeImage.OpenReadStream().ReadAsync(buffer);
			var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
			ImageUploadMessage = "";
			EmployeeGroup1.Photo = imageData;
			imageData = "";
			return;
		}

		ImageUploadMessage = "PNG file needed.";
		return;
	}

	// Forms validations
	private bool ValidateEmployeeGroup1() {
		if (string.IsNullOrEmpty(EmployeeGroup1.Name)
			|| string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber)
			|| string.IsNullOrEmpty(EmployeeGroup1.FileNumber)
			|| string.IsNullOrEmpty(EmployeeGroup1.Address)
			|| string.IsNullOrEmpty(EmployeeGroup1.Photo)
			|| string.IsNullOrEmpty(EmployeeGroup1.CivilId)
		)
			return false;
		else
			return true;
	}

	private bool ValidateEmployeeGroup2()
	{
		if (string.IsNullOrEmpty(EmployeeGroup2.JobName)
			|| EmployeeGroup2.TownId == 0
			|| EmployeeGroup2.BranchId == 0
		)
			return false;
		else
			return true;
	}

	// Save forms
	[Parameter] public EventCallback<Employee> HandleSaveEmployee { get; set; }
	private void Form1()
	{
		var isValid = ValidateEmployeeGroup1();
		if(isValid) {
			Employee.Name = EmployeeGroup1.Name;
			Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
			Employee.Address = EmployeeGroup1.Address;
			Employee.CivilId = EmployeeGroup1.CivilId;
			Employee.FileNumber = EmployeeGroup1.FileNumber;
			Employee.Photo = EmployeeGroup1.Photo;

			ShowLayer2();
		}
	}

	private async Task Form2()
	{
		var isValid = ValidateEmployeeGroup2();

		if(isValid)
		{
			Employee.JobName = EmployeeGroup2.JobName;
			Employee.Other = EmployeeGroup2.Other;
			Employee.BranchId = EmployeeGroup2.BranchId;
			Employee.TownId = EmployeeGroup2.TownId;

			await HandleSaveEmployee.InvokeAsync(Employee);

			ClearContent();
		}
	}

	public void ClearContent()
	{
		EmployeeGroup1 = new();
		EmployeeGroup2 = new();
		Employee = new();
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		allState.Action += StateHasChanged;
	}

	[Parameter] public EventCallback<int> HandleGralDptValueChange { get; set; }
	public async Task OnGeneralDepartmentValueChange(string value) => await HandleGralDptValueChange.InvokeAsync(int.Parse(value));

	[Parameter] public EventCallback<int> HandleDptValueChange { get; set; }
	public async Task OnDepartmentValueChange(string value) => await HandleDptValueChange.InvokeAsync(int.Parse(value));

	public void OnBranchValueChange(string value) => EmployeeGroup2.BranchId = int.Parse(value);

	[Parameter] public EventCallback<int> HandleCountryValueChange { get; set; }
	public async Task OnCountryValueChange(string value) => await HandleCountryValueChange.InvokeAsync(int.Parse(value));

	[Parameter] public EventCallback<int> HandleCityValueChange { get; set; }
	public async Task OnCityValueChange(string value) => await HandleCityValueChange.InvokeAsync(int.Parse(value));

	public void OnTownValueChange(string value) => EmployeeGroup2.TownId = int.Parse(value);

	public void Dispose()
	{
		allState.Action -= StateHasChanged;
		NotifyParentFormClosed.InvokeAsync();
	}
}

<style>
	.floatingDiv {
		width: 500px;
		background: #228ada;
		height: 10px;
	}

	.floatingNumber {
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: #1d1858;
		color: white;
	}

	.inactive-div {
		width: 500px;
		background: #d3d3d3;
		height: 10px;
	}

	.inactive-span {
		border-radius: 50%;
		color: white;
		background: gray;
		width: 20px;
		height: 20px;
	}

	.format-border {
		border-radius: 20px;
	}
</style>
