@implements IDisposable
@if(allState.ShowEmployee)
{
	if(ShowAddOrUPdateEmployee)
	{
		<div class="container">
			<div class="row mt-5">
				<div class="col-lg-1 text-center">
					<i class="bi bi-x-lg fs-5 text-danger" style="cursor:pointer;" @onclick="CloseForm"></i>
				</div>
				<div class="col-lg-6 text-center">
					<h2>Add Employee</h2>
				</div>
			</div>

			<div class="row">
				<div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
					<div class="hstack">
						@if(FirstLayer)
						{
							<div class="@FloatingNumber1 text-center">1</div>
							<div class="@Floatingdiv1 format-border"></div>
							<div class="@FloatingNumber2 text-center">2</div>
							<div class="@Floatingdiv2 format-border"></div>
						}

						@if (SecondLayer)
						{
							<div class="@FloatingNumber1 text-center">1</div>
							<div class="@Floatingdiv1 format-border"></div>
							<div class="@FloatingNumber1 text-center">2</div>
							<div class="@Floatingdiv2 format-border"></div>
						}
					</div>
				</div>

				<div class="col-lg-12">
					<div class="container-fluid">
						@if(FirstLayer)
						{
							<EditForm Enhance Model="EmployeeGroup1" OnValidSubmit="Form1">
								<DataAnnotationsValidator />

								<div class="row">
									<div class="col-lg-2"></div>
									<div class="col-lg-4">
										<div class="card-title mb-5 fw-bold" style="font-family: Tahoma">Personal Information</div>
										<div class="card-body">
											<div class="form-group">
												<label class="form-label" for="Input_Fullname">Fullname</label>
												<InputText id="Input_Fullname" class="form-control" @bind-Value="EmployeeGroup1.Name" placeholder="John Connor" />
												<ValidationMessage For="@(() => EmployeeGroup1.Name)" class="text-danger" />
											</div>

											<div class="form-group">
												<label class="form-label">Telephone</label>
												<InputText id="Input_Telephone" class="form-control" @bind-Value="EmployeeGroup1.TelephoneNumber" placeholder="xxx xxx xxxx" />
												<ValidationMessage For="@(() => EmployeeGroup1.TelephoneNumber)" class="text-danger" />
											</div>

											<div class="form-group">
												<label class="form-label">Address</label>
												<InputTextArea class="form-control" @bind-Value="EmployeeGroup1.Address" />
												<ValidationMessage For="@(() => EmployeeGroup1.Address)" class="text-danger" />
											</div>
										</div>
									</div>
									<div class="col-lg-4">
										<div class="card-title mb-5 fw-bold" style="font-family: Tahoma">Other Information</div>
										<div class="card-body">
											<div class="form-group">
												<label class="form-label">Civil Id</label>
												<InputText id="Input_CivilId" class="form-control" @bind-Value="EmployeeGroup1.CivilId" />
												<ValidationMessage For="@(() => EmployeeGroup1.CivilId)" class="text-danger" />
											</div>

											<div class="form-group">
												<label class="form-label">File Number</label>
												<InputText class="form-control" @bind-Value="EmployeeGroup1.FileNumber" />
												<ValidationMessage For="@(() => EmployeeGroup1.FileNumber)" class="text-danger" />
											</div>

											<div class="form-group">
												<label class="form-label">Photo</label>
												<InputText class="form-control" @bind-Value="EmployeeGroup1.Photo" />
												<ValidationMessage For="@(() => EmployeeGroup1.Photo)" class="text-danger" />
											</div>

											<div class="form-group mt-5">
												<button type="submit" class="btn btn-primary float-end mt-4 mb-5">
													<i class="bi bi-arrow-right"></i> Next
												</button>
											</div>
										</div>
									</div>
									<div class="col-lg-2"></div>
								</div>
							</EditForm>
						}

						@if(SecondLayer)
						{
							<EditForm Enhance Model="EmployeeGroup2" OnValidSubmit="Form2">
								<DataAnnotationsValidator />
								<div class="row">
									<div class="col-lg-2"></div>
									<div class="col-lg-4">
										<div class="card-title mb-5 fw-bold" style="font-family: Tahoma">Job Information</div>
										<div class="card-body">
											<div class="form-group">
												<label class="form-label">Job Name</label>
												<InputText class="form-control" @bind-Value="EmployeeGroup2.JobName" placeholder="Job Name" />
												<ValidationMessage For="@(() => EmployeeGroup2.JobName)" class="text-danger" />
											</div>

											<div class="form-group mt-3">
												@* <label class="form-label">@(GeneralDepartmentName == "" ? "Select General Department": $"Select General Department: {GeneralDepartmentName}")</label> *@
												<SfDropDownList TValue="string" TItem="GeneralDepartment" DataSource="@GeneralDepartments" Placeholder="Select General Department">
													<DropDownListFieldSettings Text="Name" Value="Id" />
													<DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange" />
												</SfDropDownList>

											</div>

											<div class="form-group mt-3">
												@* <label class="form-label">@(DepartmentName == "" ? "Select Department" : $"Select Department: {DepartmentName}")</label> *@
												<SfDropDownList TValue="string" TItem="Department" DataSource="@Departments" Placeholder="Select Department">
													<DropDownListFieldSettings Text="Name" Value="Id" />
													<DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange" />
												</SfDropDownList>
											</div>


											<div class="form-group mt-3">
												@* <label class="form-label">@(Employee.Branch == "" ? "Select Branch" : $"Select Branch: {Employee.Branch.Name}")</label> *@
												<SfDropDownList TValue="string" TItem="Branch" DataSource="@Branches" Placeholder="Select Branch">
													<DropDownListFieldSettings Text="Name" Value="Id" />
													<DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange" />
												</SfDropDownList>
												<ValidationMessage For="@(() => EmployeeGroup2.BranchId)" class="text-danger" />
											</div>
											<div class="form-group mt-4 mb-5">
												<button class="btn btn-primary float-start" type="button" @onclick="BackToFirstLayer">
													<i class="bi bi-arrow-left"></i> Back
												</button>
											</div>
										</div>
									</div>
									<div class="col-lg-4">
										<div class="card-title mb-5 fw-bold" style="font-family: Tahoma">Location Information</div>
										<div class="card-body">
											<div class="form-group">
												@* <label class="form-label">@(CountryName == "" ? "Select Country": $"Select Country: {CountryName}")</label> *@
												<SfDropDownList TValue="string" TItem="Country" DataSource="@Countries" Placeholder="Select Country">
													<DropDownListFieldSettings Text="Name" Value="Id" />
													<DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange" />
												</SfDropDownList>
											</div>

											<div class="form-group">
												@* <label class="form-label">@(CityName == "" ? "Select City" : $"Select City: {CityName}")</label> *@
												<SfDropDownList TValue="string" TItem="City" DataSource="@Cities" Placeholder="Select City">
													<DropDownListFieldSettings Text="Name" Value="Id" />
													<DropDownListEvents TValue="string" TItem="City" ValueChange="OnCityValueChange" />
												</SfDropDownList>
											</div>

											<div class="form-group">
												@* <label class="form-label">@(Employee.Town == "" ? "Select Town" : $"Select Town: {Employee.Town.Name}")</label> *@
												<SfDropDownList TValue="string" TItem="Town" DataSource="@Towns" Placeholder="Select Town">
													<DropDownListFieldSettings Text="Name" Value="Id" />
													<DropDownListEvents TValue="string" TItem="Town" ValueChange="OnTownValueChange" />
												</SfDropDownList>
											</div>

											<div class="form-control mt-3">
												<label class="form-label">Other</label>
												<textarea class="form-control" @bind="EmployeeGroup2.Other" placeholder="Optional" />
											</div>

											<div class="form-group mt-4 mb-5">
												<button class="btn btn-success float-end" type="submit">
													<i class="bi bi-save"></i> Submit
												</button>
											</div>
										</div>
									</div>
									<div class="col-lg-2"></div>
								</div>
							</EditForm>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

@code {
	[Parameter] public Employee Employee { get; set; } = new();

	[Parameter] public bool ShowAddOrUPdateEmployee { get; set; } = false;
	[Parameter] public EmployeeGroup1 EmployeeGroup1 { get; set; } = new();
	[Parameter] public EmployeeGroup2 EmployeeGroup2 { get; set; } = new();

	[Parameter] public List<Country> Countries { get; set; } = new();
	[Parameter] public List<City> Cities { get; set; } = new();
	[Parameter] public List<Town> Towns { get; set; } = new();

	[Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
	[Parameter] public List<Department> Departments { get; set; } = new();
	[Parameter] public List<Branch> Branches { get; set; } = new();

	string FloatingNumber1 = "floatingNumber";
	string Floatingdiv1 = "floatingDiv";

	string FloatingNumber2 = "inactive-span";
	string Floatingdiv2 = "inactive-div";

	public bool FirstLayer { get; set; } = true;
	public bool SecondLayer { get; set; } = false;

	private void ShowLayer2()
	{
		FirstLayer = false;
		SecondLayer = true;
	}

	private void BackToFirstLayer()
	{
		FirstLayer = true;
		SecondLayer = false;
	}

	protected override void OnInitialized()
	{
		allState.Action += StateHasChanged;
	}

	[Parameter] public EventCallback NotifyParentFormClosed { get; set; }
	private async Task CloseForm()
	{
		ShowAddOrUPdateEmployee = false;
		await NotifyParentFormClosed.InvokeAsync();
	}

	[Parameter] public EventCallback<int> HandleGralDptValueChange { get; set; }
	public async Task OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args)
	{
		await HandleGralDptValueChange.InvokeAsync(int.Parse(args.Value));
	}

	[Parameter] public EventCallback<int> HandleDptValueChange { get; set; }
	public async Task OnDepartmentValueChange(ChangeEventArgs<string, Department> args)
	{
		await HandleDptValueChange.InvokeAsync(int.Parse(args.Value));
	}

	public void OnBranchValueChange(ChangeEventArgs<string, Branch> args)
	{
		EmployeeGroup2.BranchId = int.Parse(args.Value);
	}

	[Parameter] public EventCallback<int> HandleCountryValueChange { get; set; }
	public async Task OnCountryValueChange(ChangeEventArgs<string, Country> args)
	{
		await HandleCountryValueChange.InvokeAsync(int.Parse(args.Value));
	}

	[Parameter] public EventCallback<int> HandleCityValueChange { get; set; }
	public async Task OnCityValueChange(ChangeEventArgs<string, City> args)
	{
		await HandleCityValueChange.InvokeAsync(int.Parse(args.Value));
	}

	public void OnTownValueChange(ChangeEventArgs<string, Town> args)
	{
		EmployeeGroup2.TownId = int.Parse(args.Value);
	}

	void Form1() {

	}

	void Form2()
	{
		
	}

	public void Dispose()
	{
		allState.Action -= StateHasChanged;
		NotifyParentFormClosed.InvokeAsync();
	}
}

<style>
	.floatingDiv {
		width: 500px;
		background: #228ada;
		height: 10px;
	}

	.floatingNumber {
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: #1d1858;
		color: white;
	}

	.inactive-div {
		width: 500px;
		background: #d3d3d3;
		height: 10px;
	}

	.inactive-span {
		border-radius: 50%;
		color: white;
		background: gray;
		width: 20px;
		height: 20px;
	}

	.format-border {
		border-radius: 20px;
	}
</style>
