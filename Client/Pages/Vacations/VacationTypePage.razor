@implements IDisposable

@if (allState.ShowVacationType)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card shadow-lg">
					<div class="card-header">
						<h4 class="float-start">Vacation Types</h4>
						<button class="btn btn-outline-success float-end" @onclick="AddClicked">
							<i class="bi bi-plus-circle-dotted"></i> Add Type
						</button>
					</div>
					<div class="card-header" style="max-height:580px;overflow-x:hidden;overflow-y:scroll">
						<div class="card-body">
							<table class="table table-striped">
								<thead>
									<tr>
										<th scope="col">#</th>
										<th scope="col">Id</th>
										<th scope="col">Type</th>
										<th scope="col">Action</th>
									</tr>
								</thead>
								<tbody>
									@if (Types is not null)
									{
										int count = 1;
										foreach (var item in Types)
										{
											<tr>
												<th scope="row">@count</th>
												<td>@item.Id</td>
												<td>@item.Name</td>
												<td>
													<i class="bi bi-pencil text-info clickable" @onclick="() => EditClicked(item)"></i>
													<i class="bi bi-trash text-danger clickable" @onclick="() => DeleteClicked(item)"></i>
												</td>
											</tr>
											count++;
										}
									}
									else
									{
										<tr>
											<td colspan="4">
												<div class="alert alert-info text-center">
													No Type added yet!
												</div>
											</td>
										</tr>
									}

								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

<style>
	.clickable {
		cursor: pointer;
	}
</style>

<VacationTypeDialog @ref="vacationTypeDialog" VacationType="VacationType" HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
	VacationTypeDialog? vacationTypeDialog;
	VacationType VacationType { get; set; } = new();
	List<VacationType> Types { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		await GetVacationTypes();
		allState.Action += StateHasChanged;
	}

	private async Task GetVacationTypes() => Types = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

	public void OpenDialog() => vacationTypeDialog?.OpenDialog();

	public void CloseDialog() => vacationTypeDialog?.CloseDialog();

	private void AddClicked()
	{
		VacationType = new();
		vacationTypeDialog?.ChangeTitle("Add Type");
		OpenDialog();
	}

	// Add or Update VacationType
	private async Task HandleSaveOperationEvent(VacationType vacationType)
	{
		bool isValid = true;
		if (vacationType.Id <= 0)
		{
			var (Flag, Message) = await vacationTypeService.Insert(vacationType, Constants.VacationTypeBaseUrl);
			isValid = await DisplayMessage(Flag, Message);
		}
		else
		{
			var (Flag, Message) = await vacationTypeService.Update(vacationType, Constants.VacationTypeBaseUrl);
			isValid = await DisplayMessage(Flag, Message);
		}

		if (isValid)
		{
			VacationType = new();
			await GetVacationTypes();
			vacationTypeDialog?.ChangeTitle("Add Vacation Type");
			// CloseDialog();
		}
	}

	private void EditClicked(VacationType item)
	{
		VacationType = item;
		vacationTypeDialog?.ChangeTitle("Edit Type");
		OpenDialog();
	}

	private async Task DeleteClicked(VacationType item)
	{
		bool confirm = await alertService.ShowConfirmation($"Are you sure you want to delete {item.Name}?", "Confirm Delete");
		if (!confirm) return; // User cancelled the deletion

		var result = await vacationTypeService.Delete(item.Id, Constants.VacationTypeBaseUrl);

		if (await DisplayMessage(result.Flag, result.Message))
			await GetVacationTypes();
	}

	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await alertService.ShowSuccessToast(message);

			return true;
		}
		else
		{
			await alertService.ShowErrorToast(message);
			return false;
		}
	}

	public void Dispose()
	{
		allState.Action -= StateHasChanged;
	}
}
