@implements IDisposable

@if (allState.ShowUser)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card">
					<div class="card-header">
						<h4 class="float-start">Users</h4>
						<button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
							<i class="bi bi-plus-circle-dotted"></i> Add User
						</button>
					</div>
				</div>
				<div class="card-header" style="max-height:580px;overflow-x:hidden;overflow-y:scroll">
					<div class="card-body">
						<table class="table table-striped">
							<thead>
								<tr>
									<th scope="col">#</th>
									<th scope="col">Id</th>
									<th scope="col">Name</th>
									<th scope="col">Email</th>
									<th scope="col">Role</th>
									<th scope="col">Action</th>
								</tr>
							</thead>
							<tbody>
								@if (ManageUsers is not null)
								{
									int count = 1;
									foreach (var item in ManageUsers)
									{
										<tr>
											<th scope="row">@count</th>
											<td>@item.UserId</td>
											<td>@item.Name</td>
											<td>@item.Email</td>
											<td>@item.Role</td>
											<td>
												<i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
												<i class="bi bi-trash text-danger" id="cursorStyle2" @onclick="() => DeleteClicked(item)"></i>
											</td>
										</tr>
										count++;
									}
								}
								else
								{
									<tr>
										<td colspan="4">
											<div class="alert alertalert-info text-center">
												No users added yet!
											</div>
										</td>
									</tr>
								}

							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
}

<style>
	#cursorStyle {
		cursor: pointer;
	}
</style>

<UserDialog @ref="userDialog" ManageUser="ManageUser" SystemRoles="SystemRoles" OnUserAdded="OnUserSave" />

@code {
	public string Title { get; set; } = "Add User";
	UserDialog? userDialog;
	ManageUser ManageUser = new();
	public List<ManageUser> ManageUsers { get; set; } = new();
	public List<SystemRole> SystemRoles { get; set; } = new();

	protected async override Task OnInitializedAsync()
	{
		await GetUsers();
		await GetRoles();
		allState.Action += StateHasChanged;
	}

	private async Task GetUsers()
	{
		ManageUsers = await accountService.GetUsers();
	}

	private async Task GetRoles()
	{
		SystemRoles = await accountService.GetRoles();
	}

	private void AddButtonClicked()
	{
		// userDialog?.ChangeTitle("Add User");
		ManageUser = new();
		OpenDialog();
	}

	private void OpenDialog()
	{
		userDialog?.OpenDialog();
	}

	private async Task OnUserSave(ManageUser manageUser)
	{
		bool isValid = false;

		var result = await accountService.UpdateUser(manageUser);
		isValid = await DisplayMessage(result!.Flag, result.Message);

		if (isValid)
		{
			ManageUser = new();
			await GetUsers();
			// userDialog?.ChangeTitle("Add User");
		}
	}

	private void EditClicked(ManageUser manageUser)
	{
		ManageUser = manageUser;
		OpenDialog();
	}

	private async Task DeleteClicked(ManageUser user)
	{
		bool confirm = await alertService.ShowConfirmation("Confirm Delete", $"Are you sure you wanna delete {user.Name}?");

		if (!confirm) return;

		var response = await accountService.DeleteUser(user.UserId);
		var result = await DisplayMessage(response!.Flag, response.Message!);
		if (result) await GetUsers();
	}

	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await alertService.ShowSuccessToast(message);
			return true;
		}
		else
		{
			await alertService.ShowErrorToast(message);
			return false;
		}
	}

	// Dispose method is used to unsubscribe from the event
	public void Dispose()
	{
		allState.Action -= StateHasChanged;
	}
}
