<CustomModal @bind-IsVisible="IsVisible" Title="@Title">
	<ChildContent>
			<EditForm Model="Department" Enhance OnSubmit="Save">
				<div class="card border-success">
					<div class="card-body">
						<div class="form-group mb-2">
							<label class="form-label">Id</label>
							<input class="form-control" @bind="Department.Id" disabled />
						</div>
						<div class="form-group mb-2">
							<label class="form-label">Name</label>
							<InputText class="form-control" @bind-Value="Department.Name" />
						</div>
						<div class="form-group mb-2">
							@if (Department.GeneralDepartment != null)
							{
								<MudSelect T="string" Label="Select General Department" Value="Department.GeneralDepartmentId.ToString()" ValueChanged="OnValueChange">
									@foreach (var dept in GeneralDepartments)
									{
										<MudSelectItem Value="@dept.Id.ToString()">@dept.Name</MudSelectItem>
									}
								</MudSelect>
							}
							else
							{
								<MudSelect T="string" Label="Select General Department" ValueChanged="OnValueChange">
									@foreach (var dept in GeneralDepartments)
									{
										<MudSelectItem Value="@dept.Id.ToString()">@dept.Name</MudSelectItem>
									}
								</MudSelect>
							}
						</div>
					</div>
				</div>
			</EditForm>
	</ChildContent>
	<FooterContent>
		<button type="button" class="btn btn-primary" @onclick="Save">Save</button>
	</FooterContent>
</CustomModal>

@code {
	[Parameter] public Department Department { get; set; } = new();
	[Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
	[Parameter] public EventCallback<Department> OnDepartmentAdded { get; set; } // Callback to notify save operation event to parent component

	private bool IsVisible { get; set; } = false;
	private string Title { get; set; } = "Add Department";

	private async void Save()
	{
		if (string.IsNullOrEmpty(Department.Name))
			// await dialogService.AlertAsync("You need to provide a Department name", "Alert!");
			await alertService.ShowErrorToast("You need to provide a Department name");
		else
			await OnDepartmentAdded.InvokeAsync(Department);
	}

	public void OpenDialog()
	{
		IsVisible = true;
		StateHasChanged();
	}

	public void ChangeTitle(string title)
	{
		Title = title;
		StateHasChanged();
	}

	// private void OnValueChange(ChangeEventArgs<string, GeneralDepartment> args)
	// {
	// 	Department.GeneralDepartmentId = int.Parse(args.Value);
	// }
	private void OnValueChange(string value)
	{
		if (int.TryParse(value, out int id))
		{
			Department.GeneralDepartmentId = id;
		}
	}
}
