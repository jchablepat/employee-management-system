@* <SfModal @bind-IsVisible="IsVisible" Title="@Title" OnOpen="OpenDialog"> *@
<CustomModal @bind-IsVisible="IsVisible" Title="@Title">
	<ChildContent>
		<EditForm Model="GeneralDepartment" Enhance OnSubmit="Save">
			<div class="card border-success">
				<div class="card-body">
					<div class="form-group">
						<label class="form-label">Name</label>
						<InputText class="form-control" @bind-Value="GeneralDepartment.Name" />
					</div>
				</div>
			</div>
		</EditForm>
	</ChildContent>
	<FooterContent>
		<button type="button" class="btn btn-primary" @onclick="Save">Save</button>
	</FooterContent>
</CustomModal>
@*     <FooterContent>
        <DialogButton Type="ButtonType.Submit" Content="Save" IsPrimary="true" OnClick="Save"></DialogButton>
    </FooterContent>
</SfModal> *@
@code {
	[Parameter]
	public GeneralDepartment GeneralDepartment { get; set; } = new();
	[Parameter]
	public EventCallback<GeneralDepartment> OnGralDepartmentAdded { get; set; } // Callback to notify save operation event to parent component
	private bool IsVisible { get; set; } = false;
	public string Title { get; set; } = "Add Department";

	public void OpenDialog()
	{
		IsVisible = true;
		StateHasChanged();
	}

	async void Save() {
		if (string.IsNullOrEmpty(GeneralDepartment.Name))
			// await dialogService.AlertAsync("You need to provide a Department name", "Alert!");
			await alertService.ShowErrorToast("You need to provide a Department name");
		else
			await OnGralDepartmentAdded.InvokeAsync(GeneralDepartment);
	}

	public void ChangeTitle(string title)
	{
		Title = title;
		StateHasChanged();
	}
}
