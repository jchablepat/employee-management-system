@implements IDisposable

@if (allState.ShowTown)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card">
					<div class="card-header">
						<h4 class="float-start">Towns</h4>
						<button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
							<i class="bi bi-plus-circle-dotted"></i> Add Town
						</button>
					</div>
				</div>
				<div class="card-header" style="max-height:580px;overflow-x:hidden;overflow-y:scroll">
					<div class="card-body">
						<table class="table table-striped">
							<thead>
								<tr>
									<th scope="col">#</th>
									<th scope="col">Id</th>
									<th scope="col">City</th>
									<th scope="col">Town</th>
									<th scope="col">Action</th>
								</tr>
							</thead>
							<tbody>
								@if (Towns is not null)
								{
									int count = 1;
									foreach (var item in Towns)
									{
										<tr>
											<th scope="row">@count</th>
											<td>@item.Id</td>
											<td>@item.City!.Name</td>
											<td>@item.Name</td>
											<td>
												<i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
												<i class="bi bi-trash text-danger" id="cursorStyle2" @onclick="() => DeleteClicked(item)"></i>
											</td>
										</tr>
										count++;
									}
								}
								else
								{
									<tr>
										<td colspan="4">
											<div class="alert alertalert-info text-center">
												No cities added yet!
											</div>
										</td>
									</tr>
								}

							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
}

<style>
	#cursorStyle {
		cursor: pointer;
	}
</style>

<TownDialog @ref="townDialog"
	Town="Town" Cities="Cities"
	OnTownAdded="OnTownAdded" />

@code {
	public string Title { get; set; } = "Add Town";
	TownDialog? townDialog;
	Town Town = new();
	public List<Town> Towns { get; set; } = new();
	public List<City> Cities { get; set; } = new();

	protected async override Task OnInitializedAsync()
	{
		await GetCities();
		await GetTowns();
		allState.Action += StateHasChanged;
	}

	private async Task GetCities()
	{
		Cities = await cityService.GetAll(Constants.CityBaseUrl);
	}

	private async Task GetTowns()
	{
		Towns = await townService.GetAll(Constants.TownBaseUrl);
	}

	private void AddButtonClicked()
	{
		townDialog?.ChangeTitle("Add Town");
		Town = new();
		OpenDialog();
	}

	private void OpenDialog()
	{
		townDialog?.OpenDialog();
	}

	private async Task OnTownAdded(Town town)
	{
		bool isValid = false;
		if (town.Id > 0)
		{
			var result = await townService.Update(town, Constants.TownBaseUrl);
			isValid = await DisplayMessage(result.Flag, result.Message);
		}
		else
		{
			var result = await townService.Insert(town, Constants.TownBaseUrl);
			isValid = await DisplayMessage(result.Flag, result.Message);
		}

		if (isValid)
		{
			Town = new();
			await GetTowns();
			townDialog?.ChangeTitle("Add Town");
		}
	}

	private void EditClicked(Town town)
	{
		townDialog?.ChangeTitle("Edit Town");
		Town = town;
		OpenDialog();
	}

	private async Task DeleteClicked(Town town)
	{
		bool confirm = await alertService.ShowConfirmation("Confirm Delete", $"Are you sure you wanna delete {town.Name}?");

		if (!confirm) return;

		var response = await countryService.Delete(town.Id, Constants.TownBaseUrl);
		var result = await DisplayMessage(response.Flag, response.Message);
		if (result) await GetTowns();
	}

	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await alertService.ShowSuccessToast(message);

			return true;
		}
		else
		{
			await alertService.ShowErrorToast(message);
			return false;
		}
	}

	// Dispose method is used to unsubscribe from the event
	public void Dispose()
	{
		allState.Action -= StateHasChanged;
	}
}
